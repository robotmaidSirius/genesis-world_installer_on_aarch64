diff --git a/.github/workflows/scripts/ti_build/dep.py b/.github/workflows/scripts/ti_build/dep.py
index 4e0a5a36a..784698a90 100644
--- a/.github/workflows/scripts/ti_build/dep.py
+++ b/.github/workflows/scripts/ti_build/dep.py
@@ -153,6 +153,9 @@ def download_dep(url, outdir, *, strip=0, force=False, args=None, plain=False, e
     elif name.endswith(".tar.gz") or name.endswith(".tgz"):
         outdir.mkdir(parents=True, exist_ok=True)
         tar("-xzf", local_cached, "-C", outdir, f"--strip-components={strip}")
+    elif name.endswith(".tar.xz"):
+        outdir.mkdir(parents=True, exist_ok=True)
+        tar("-xJf", local_cached, "-C", outdir, f"--strip-components={strip}")
     elif name.endswith(".sh"):
         bash(local_cached, *args)
     elif "." not in name and args is not None:
diff --git a/.github/workflows/scripts/ti_build/entry.py b/.github/workflows/scripts/ti_build/entry.py
index 66b73a920..51116f4af 100644
--- a/.github/workflows/scripts/ti_build/entry.py
+++ b/.github/workflows/scripts/ti_build/entry.py
@@ -51,11 +51,17 @@ def build_wheel(python: Command, pip: Command) -> None:
     elif wheel_tag:
         proj_tags.extend(["egg_info", f"--tag-build={wheel_tag}"])
 
-    if platform.system() == "Linux":
+    u = platform.uname()
+    if (u.system, u.machine) == ("Linux", "x86_64"):
         if is_manylinux2014():
             extra.extend(["-p", "manylinux2014_x86_64"])
         else:
-            extra.extend(["-p", "manylinux_2_27_x86_64"])
+            extra.extend(["-p", "manylinux_2_28_x86_64"])
+    elif (u.system, u.machine) in (("Linux", "arm64"), ("Linux", "aarch64")):
+        extra.extend(["-p", "manylinux_2_28_aarch64"])
+    else:
+        extra.extend(["-p", "manylinux_2_28_x86_64"])
+
 
     python("setup.py", "clean")
     python("misc/make_changelog.py", "--ver", "origin/master", "--repo_dir", "./", "--save")
diff --git a/.github/workflows/scripts/ti_build/llvm.py b/.github/workflows/scripts/ti_build/llvm.py
index e487a560b..c627eb3a0 100644
--- a/.github/workflows/scripts/ti_build/llvm.py
+++ b/.github/workflows/scripts/ti_build/llvm.py
@@ -19,7 +19,7 @@ def setup_llvm() -> None:
     Download and install LLVM.
     """
     u = platform.uname()
-    if u.system == "Linux":
+    if (u.system, u.machine) == ("Linux", "x86_64"):
         if cmake_args.get_effective("TI_WITH_AMDGPU"):
             out = get_cache_home() / "llvm15-amdgpu-005"
             url = "https://github.com/GaleSeLee/assets/releases/download/v0.0.5/taichi-llvm-15.0.0-linux.zip"
@@ -31,6 +31,11 @@ def setup_llvm() -> None:
             out = get_cache_home() / "llvm15"
             url = "https://github.com/taichi-dev/taichi_assets/releases/download/llvm15/taichi-llvm-15-linux.zip"
         download_dep(url, out, strip=1)
+
+    elif (u.system, u.machine) in (("Linux", "arm64"), ("Linux", "aarch64")):
+        out = get_cache_home() / "llvm15-manylinux2014"
+        # FIXME: ARM LLVM!
+        pass
     elif (u.system, u.machine) == ("Darwin", "arm64"):
         out = get_cache_home() / "llvm15-m1-nozstd"
         url = "https://github.com/taichi-dev/taichi_assets/releases/download/llvm15/taichi-llvm-15-m1-nozstd.zip"
diff --git a/.github/workflows/scripts/ti_build/python.py b/.github/workflows/scripts/ti_build/python.py
index 205fe1021..261d9a328 100644
--- a/.github/workflows/scripts/ti_build/python.py
+++ b/.github/workflows/scripts/ti_build/python.py
@@ -15,22 +15,24 @@ from .dep import download_dep
 from .misc import banner, get_cache_home, path_prepend, info
 from .tinysh import Command, sh
 
-
 # -- code --
-def setup_mambaforge(prefix):
+def setup_miniforge(prefix):
     u = platform.uname()
-    if u.system == "Linux":
-        url = "https://github.com/conda-forge/miniforge/releases/download/23.1.0-1/Mambaforge-23.1.0-1-Linux-x86_64.sh"
+    if (u.system, u.machine) == ("Linux", "x86_64"):
+        url = "https://github.com/conda-forge/miniforge/releases/download/24.11.3-0/Miniforge3-24.11.3-0-Linux-x86_64.sh"
+        download_dep(url, prefix, args=["-bfp", str(prefix)])
+    elif (u.system, u.machine) in (("Linux", "arm64"), ("Linux", "aarch64")):
+        url = "https://github.com/conda-forge/miniforge/releases/download/24.11.3-0/Miniforge3-24.11.3-0-Linux-aarch64.sh"
         download_dep(url, prefix, args=["-bfp", str(prefix)])
     elif (u.system, u.machine) == ("Darwin", "arm64"):
-        url = "https://github.com/conda-forge/miniforge/releases/download/23.1.0-1/Mambaforge-23.1.0-1-MacOSX-arm64.sh"
+        url = "https://github.com/conda-forge/miniforge/releases/download/24.11.3-0/Miniforge3-24.11.3-0-MacOSX-arm64.sh"
         download_dep(url, prefix, args=["-bfp", str(prefix)])
     elif (u.system, u.machine) == ("Darwin", "x86_64"):
-        url = "https://github.com/conda-forge/miniforge/releases/download/23.1.0-1/Mambaforge-23.1.0-1-MacOSX-x86_64.sh"
+        url = "https://github.com/conda-forge/miniforge/releases/download/24.11.3-0/Miniforge3-24.11.3-0-MacOSX-x86_64.sh"
         download_dep(url, prefix, args=["-bfp", str(prefix)])
     elif u.system == "Windows":
         url = (
-            "https://github.com/conda-forge/miniforge/releases/download/23.1.0-1/Mambaforge-23.1.0-1-Windows-x86_64.exe"
+            "https://github.com/conda-forge/miniforge/releases/download/24.11.3-0/Miniforge3-Windows-x86_64.exe"
         )
         download_dep(
             url,
@@ -82,8 +84,8 @@ def setup_python(version: str) -> Tuple[Command, Command]:
 
     windows = platform.system() == "Windows"
 
-    prefix = get_cache_home() / "mambaforge"
-    setup_mambaforge(prefix)
+    prefix = get_cache_home() / "miniforge"
+    setup_miniforge(prefix)
 
     if windows:
         conda_path = prefix / "Scripts" / "conda.exe"
@@ -92,9 +94,9 @@ def setup_python(version: str) -> Tuple[Command, Command]:
 
     if not conda_path.exists():
         shutil.rmtree(prefix, ignore_errors=True)
-        setup_mambaforge(prefix)
+        setup_miniforge(prefix)
         if not conda_path.exists():
-            raise RuntimeError(f"Failed to setup mambaforge at {prefix}")
+            raise RuntimeError(f"Failed to setup miniforge at {prefix}")
 
     conda = sh.bake(str(conda_path))
 
diff --git a/.github/workflows/scripts/ti_build/sccache.py b/.github/workflows/scripts/ti_build/sccache.py
index a49e57c58..00d549c12 100644
--- a/.github/workflows/scripts/ti_build/sccache.py
+++ b/.github/workflows/scripts/ti_build/sccache.py
@@ -31,18 +31,22 @@ def setup_sccache() -> Command:
         raise RuntimeError(f"Unsupported platform: {u.system} {u.machine}")
 
     if not exe.exists():
-        if u.system == "Linux":
-            url = "https://github.com/mozilla/sccache/releases/download/v0.4.1/sccache-v0.4.1-x86_64-unknown-linux-musl.tar.gz"
+        if (u.system, u.machine) == ("Linux", "x86_64"):
+            url = "https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-x86_64-unknown-linux-musl.tar.gz"
+
+        elif (u.system, u.machine) in (("Linux", "arm64"), ("Linux", "aarch64")):
+            url = "https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-aarch64-unknown-linux-musl.tar.gz"
+
         elif (u.system, u.machine) == ("Darwin", "arm64"):
             url = (
-                "https://github.com/mozilla/sccache/releases/download/v0.4.1/sccache-v0.4.1-aarch64-apple-darwin.tar.gz"
+                "https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-aarch64-apple-darwin.tar.gz"
             )
         elif (u.system, u.machine) == ("Darwin", "x86_64"):
             url = (
-                "https://github.com/mozilla/sccache/releases/download/v0.4.1/sccache-v0.4.1-x86_64-apple-darwin.tar.gz"
+                "https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-x86_64-apple-darwin.tar.gz"
             )
         elif u.system == "Windows":
-            url = "https://github.com/mozilla/sccache/releases/download/v0.4.1/sccache-v0.4.1-x86_64-pc-windows-msvc.tar.gz"
+            url = "https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-x86_64-pc-windows-msvc.tar.gz"
         else:
             raise RuntimeError(f"Unsupported platform: {u.system} {u.machine}")
 
diff --git a/.github/workflows/scripts/ti_build/vulkan.py b/.github/workflows/scripts/ti_build/vulkan.py
index 567818086..e0b2c9123 100644
--- a/.github/workflows/scripts/ti_build/vulkan.py
+++ b/.github/workflows/scripts/ti_build/vulkan.py
@@ -12,23 +12,34 @@ from .python import path_prepend
 
 
 # -- code --
-@banner("Setup Vulkan 1.3.236.0")
+@banner("Setup Vulkan 1.4.304.0")
 def setup_vulkan():
     u = platform.uname()
-    if u.system == "Linux":
-        url = "https://sdk.lunarg.com/sdk/download/1.3.236.0/linux/vulkansdk-linux-x86_64-1.3.236.0.tar.gz"
-        prefix = get_cache_home() / "vulkan-1.3.236.0"
+    if (u.system, u.machine) == ("Linux", "x86_64"):
+        url = "https://sdk.lunarg.com/sdk/download/1.4.304.0/linux/vulkansdk-linux-x86_64-1.4.304.0.tar.xz"
+        prefix = get_cache_home() / "vulkan-1.4.304.0"
         download_dep(url, prefix, strip=1)
         sdk = prefix / "x86_64"
         os.environ["VULKAN_SDK"] = str(sdk)
         path_prepend("PATH", sdk / "bin")
         path_prepend("LD_LIBRARY_PATH", sdk / "lib")
         os.environ["VK_LAYER_PATH"] = str(sdk / "etc" / "vulkan" / "explicit_layer.d")
-    # elif (u.system, u.machine) == ("Darwin", "arm64"):
+    elif (u.system, u.machine) in (("Linux", "arm64"), ("Linux", "aarch64")):
+        url = (
+            "https://github.com/johnnynunez/vulkan-sdk-arm/releases/download/1.4.304.0/"
+            "vulkansdk-linux-arm64-ubuntu-22.04-arm-1.4.304.0.zip"
+        )
+        prefix = get_cache_home() / "vulkan-1.4.304.0"
+        download_dep(url, prefix, strip=1)
+        sdk = prefix / "arm64"
+        os.environ["VULKAN_SDK"] = str(sdk)
+        path_prepend("PATH", sdk / "bin")
+        path_prepend("LD_LIBRARY_PATH", sdk / "lib")
+        os.environ["VK_LAYER_PATH"] = str(sdk / "etc" / "vulkan" / "explicit_layer.d")
     # elif (u.system, u.machine) == ("Darwin", "x86_64"):
     elif (u.system, u.machine) == ("Windows", "AMD64"):
-        url = "https://sdk.lunarg.com/sdk/download/1.3.236.0/windows/VulkanSDK-1.3.236.0-Installer.exe"
-        prefix = get_cache_home() / "vulkan-1.3.236.0"
+        url = "https://sdk.lunarg.com/sdk/download/1.4.304.0/windows/VulkanSDK-1.4.304.0-Installer.exe"
+        prefix = get_cache_home() / "vulkan-1.4.304.0"
         download_dep(
             url,
             prefix,
diff --git a/docs/lang/articles/contribution/dev_install.md b/docs/lang/articles/contribution/dev_install.md
index 2133271dd..9ca6b61db 100644
--- a/docs/lang/articles/contribution/dev_install.md
+++ b/docs/lang/articles/contribution/dev_install.md
@@ -452,7 +452,7 @@ A typical cache dir will contain sub folders below:
 | bootstrap        | Contains Python packages used by `build.py` itself            | [bootstrap.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/bootstrap.py) |
 | deps             | Downloaded external dependencies, before extract/install      | [dep.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/dep.py)             |
 | llvm15           | Managed pre-built LLVM binaries                               | [llvm.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/llvm.py)           |
-| mambaforge       | Managed conda environment dedicated to build / develop Taichi | [python.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/python.py)       |
+| miniforge       | Managed conda environment dedicated to build / develop Taichi | [python.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/python.py)       |
 | sccache          | Compile cache                                                 | [sccache.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/sccache.py)     |
 | vulkan-1.x.xxx.x | Vulkan SDK location                                           | [vulkan.py](https://github.com/taichi-dev/taichi/blob/master/.github/workflows/scripts/ti_build/vulkan.py)       |
 
diff --git a/python/taichi/_version_check.py b/python/taichi/_version_check.py
index 4f6285e41..595287d54 100644
--- a/python/taichi/_version_check.py
+++ b/python/taichi/_version_check.py
@@ -18,8 +18,11 @@ def check_version(cur_uuid):
     payload = {"version": version, "platform": "", "python": ""}
 
     system = platform.system()
-    if system == "Linux":
-        payload["platform"] = "manylinux_2_27_x86_64"
+    u = platform.uname()
+    if (u.system, u.machine) == ("Linux", "x86_64"):
+        payload["platform"] = "manylinux_2_28_x86_64"
+    elif (u.system, u.machine) in (("Linux", "arm64"), ("Linux", "aarch64")):
+        payload["platform"] = "manylinux_2_28_aarch64"
     elif system == "Windows":
         payload["platform"] = "win_amd64"
     elif system == "Darwin":
diff --git a/taichi/runtime/llvm/runtime_module/runtime.cpp b/taichi/runtime/llvm/runtime_module/runtime.cpp
index 1e63bbeaf..a5a7abeff 100644
--- a/taichi/runtime/llvm/runtime_module/runtime.cpp
+++ b/taichi/runtime/llvm/runtime_module/runtime.cpp
@@ -1133,7 +1133,7 @@ uint32 cuda_match_any_sync_i32(u32 mask, i32 value) {
 u32 cuda_match_all_sync_i32(u32 mask, i32 value) {
 #if ARCH_cuda
   u32 ret;
-  asm volatile("match.all.sync.b32  %0, %1, %2;"
+  asm volatile("match.all.sync.b32  %w0, %w1, %w2;"
                : "=r"(ret)
                : "r"(value), "r"(mask));
   return ret;
@@ -1145,9 +1145,9 @@ u32 cuda_match_all_sync_i32(u32 mask, i32 value) {
 uint32 cuda_match_any_sync_i64(u32 mask, i64 value) {
 #if ARCH_cuda
   u32 ret;
-  asm volatile("match.any.sync.b64  %0, %1, %2;"
+  asm volatile("match.any.sync.b64  %w0, %w1, %w2;"
                : "=r"(ret)
-               : "l"(value), "r"(mask));
+               : "r"(value), "r"(mask));
   return ret;
 #else
   return 0;
@@ -1157,7 +1157,7 @@ uint32 cuda_match_any_sync_i64(u32 mask, i64 value) {
 #if ARCH_cuda
 uint32 cuda_active_mask() {
   unsigned int mask;
-  asm volatile("activemask.b32 %0;" : "=r"(mask));
+  asm volatile("activemask.b32 %w0;" : "=r"(mask));
   return mask;
 }
 #else
